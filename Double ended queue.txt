#include<iostream>
using namespace std;
using namespace std;
class DEQueue
{
	int* arr;
	int front, rear;
	int size = -1;
public:
	bool is_Full() {
		if (this->arr[this->rear]!=-1) {
			return true;
		}
		else {
			return false;
		}
	}
	DEQueue(int size)
	{
		this->size = size;
		arr = new int[size];
		front = -1;
		rear = -1;
		for (int i = 0; i < this->size; i++) {
			arr[i] = -1;
		}
	}
	void push_front(int data) {
		if (this->front == -1) {
			this->front = this->front + 1;
			this->rear = this->rear + 1;
			this->arr[this->front] = data;
		}
		else {	
			if (this->rear <= this->size - 1) {
				if (this->arr[this->rear + 1] == -1) {
					for (int i = this->rear + 1; i >= 0; i--) {
						if (arr[i] == -1) {
							swap(arr[i - 1], arr[i]);
						}
						else {
							return;
						}
					}
					arr[this->front] = data;
					this->rear = (this->rear + 1) % this->size;
					return;
				}
			}
			 if (this->front != 0) {
				 if (this->rear == this->size - 1) {
					 if (this->arr[front - 1] == -1) {
						 this->front = this->front - 1;
						 this->arr[this->front] = data;
						 return;
					 }
					 else {
						 cout << "Insertation Can not be Possible\n";
					 }
				 }
			 }
			 else {
				 if (this->rear == this->size - 1)
			     cout << "Insertation Can not be Possible\n";
			 }
		}
	};
	void push_back(int data) {
		if (this->front == -1) {
			this->front = this->front + 1;
			this->rear = this->rear + 1;
			this->arr[this->front] = data;
		}
		else {
			this->rear = (this->rear + 1) % this->size;
			if (this->is_Full() == true) {
				if (this->rear==0) {
					cout << "Queue us Full\n";
					this->rear = this->size - 1;
					return;
				}
				else {
					cout << "Queue is Full\n";
					rear= rear - 2;
					return;
				}
			}
			this->arr[this->rear] = data;
		}
	};
	void Display() {
		if (this->arr[this->front] == -1) {
			cout << "Queue is Empty";
			return;
		}
		for (int i = 0; i < this->size; i++) {
			if (this->arr[i] == -1) {
				continue;
			}
			cout << this->arr[i]<<" ";
		}
		cout << endl;
	}
	void pop_front() {
		if (this->empty() == true) {
			cout << "Queue is Empty";
			return;
		}
		if (this->arr[this->front] == -1) {
			cout << "Queue is Empty";
			return;
		}
		this->arr[this->front] = -1;
		this->front = (this->front+1) % 10;
	}
	void pop_back() {
		if (this->empty() == true) {
			cout << "Queue is Empty";
			return;
		}
		if (this->arr[this->front] == -1) {
			cout << "Queue is Empty";
		}
		else {
			if (this->rear == 0) {
				this->arr[this->rear] = -1;
				this->rear = this->size-1;
			}
			else {
				this->arr[this->rear] = -1;
				this->rear = this->rear - 1;
			}
		}
	}
	int get_front();
	int get_back();
	bool empty() {
		if (this->front == -1) {
			return true;
		}
		else {
			return false;
		}
	}
};
int main() {
	DEQueue obj(5);
	int n;
	while (true) {
		cout << "Enter the Respective Number To Perform the operation\n";
		cout << "1 Push_Front\n";
		cout << "2 push_back\n";
		cout << "3 pop_front\n";
		cout << "4 pop_Back\n";
		cout << "5 Dsiplay\n";
		int in;
		cin >> in;
		if (in == 1) {
			int data;
			cout << "Enter the Data\n";
			cin >> data;
			obj.push_front(data);
		}if (in == 2) {
			int data;
			cout << "Enter the Data\n";
			cin >> data;
			obj.push_back(data);
		}if (in == 3) {
			obj.pop_front();
		}if (in == 4) {
			obj.pop_back();
		}if (in == 5) {
			obj.Display();
		}

	}
	system("pause");
	return 0;
}
